import TaskScheduler from './Scheduler';
import Bot from './Bot';
import { message } from 'telegraf/filters';
import { initDB } from './DB';
import TaskList from './DB/entities/TaskList';
import { ITask } from './DB/entities/Task';
import Chat from './DB/entities/Chat';
import { isValidOnStartContext } from './utils';
import Server from './AdminApi';
import { config } from 'dotenv';

config();

initEverything();

process.once('SIGINT', () => Bot.stop('SIGINT'));
process.once('SIGTERM', () => Bot.stop('SIGTERM'));

async function initEverything() {
  await initBot();
  console.log('Bot ready');
  await initDB();
  console.log('MongoDB ready');
  const taskList = await TaskList.findOne({});
  await TaskScheduler.init(taskList?.id, sendNewTask);
  console.log('Task Scheduler ready');
  Server.listen(process.env.API_PORT, () => {
    console.log(
      `Admin server ready. Listening on port ${process.env.API_PORT}`
    );
  });
}

async function initBot() {
  Bot.start(onStart);

  Bot.on(message('sticker'), (ctx) => ctx.reply('–í–∞—É, –∞—Ö—É–µ—Ç—å! üëç'));

  Bot.hears('–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞', getCurrentTask);
  Bot.hears('/currentTask', getCurrentTask);

  Bot.hears('–û—Ç–∫–ª—é—á–∏ –º–µ–Ω—è', removeUser);
  Bot.hears('/turnOff', removeUser);

  Bot.launch();
}

async function sendNewTask(newTask: ITask) {
  console.log('Sending new task', { currentTask: TaskScheduler.currentTask });

  (await Chat.find()).forEach((chat) => {
    Bot.telegram.sendMessage(chat.chatId, TaskScheduler.currentTask.message);
  });
}

async function getCurrentTask(ctx) {
  const chat = await Chat.findOne({ chatId: ctx.chat.id });
  if (!chat) {
    ctx.reply('–ö—É–¥–∞! –ù–∞–∂–º–µ—à—å /start - –∏ –ø–æ–ª—É—á–∏—à—å –∑–∞–¥–∞–Ω–∏–µ!');
    return;
  }

  if (chat.isActive === false) {
    ctx.reply(
      '–°–æ—Ä–µ, –∑–∞–¥–∞–Ω–∏—è —Ç—É—Ç –≤–æ–Ω—é—á–∫–∞–º –Ω–µ –≤—ã–¥–∞—é—Ç. –•–æ—á–µ—à—å –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –≤–æ–Ω—è—Ç—å? –ù–∞–∂–º–∏ /start –∞ —Ç–∞–º —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º.'
    );
    return;
  }

  // deprecated –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—é
  if (!TaskScheduler.currentTask) {
    ctx.reply(
      '–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞–¥–∞—á–∏. –ù–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç! –ê –ø–æ–∫–∞ –≤—ã–º–µ—Ç–∞–π—Å—è –æ—Ç —Å—é–¥–∞ üßπ'
    );
    return;
  }
  ctx.reply(TaskScheduler.currentTask.message);
}

async function removeUser(ctx) {
  try {
    const chat = await Chat.findOne({ chatId: ctx.chat.id });
    if (!chat) {
      console.error('Error removing user, chat not found');
      ctx.reply(
        '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - –ø–ª—é–Ω—å, –∑–∞–±–ª–æ–∫–∏—Ä—É–π –±–æ—Ç–∞ –∏ —Å—ä–µ—à—å –∫–æ–Ω—Ñ–µ—Ç–∫—É.'
      );
      return;
    }

    if (!chat.isActive) {
      ctx.reply(
        '–î–∞ –ø–æ–Ω—è–ª —è —á—Ç–æ –Ω–µ –Ω–∞–¥–æ —Ç–µ–±–µ –ø–∏—Å–∞—Ç—å. –Ø –∂–µ —Ç–µ–±–µ —É–∂–µ –Ω–µ –ø–∏—à—É. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å –≤–æ–Ω—è—Ç—å, –Ω–∞–ø–∏—à–∏ /start. –ê –µ—Å–ª–∏ —è –≤—Å–µ —Ç–∞–∫–∏ –ø–∏—à—É, –Ω—É —Å–æ—Ä–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ó–∞–±–ª–æ–∫–∏—Ä—É–π –±–æ—Ç–∞ –∏ —Å—ä–µ—à—å –∫–æ–Ω—Ñ–µ—Ç–∫—É.'
      );
      return;
    }

    await Chat.updateOne({ chatId: ctx.chat.id }, { isActive: false });
    ctx.reply(
      '–û–∫–µ–π, –≥—Ä—è–∑–Ω–∞—è –≤–æ–Ω—é—á–∫–∞, —è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É —Ç–µ–±–µ –ø–∏—Å–∞—Ç—å üí©. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å –≤–æ–Ω—è—Ç—å, –Ω–∞–ø–∏—à–∏ /start'
    );
  } catch (err) {
    console.error('Error removing user', err);
    ctx.reply(
      '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - –ø–ª—é–Ω—å, –∑–∞–±–ª–æ–∫–∏—Ä—É–π –±–æ—Ç–∞ –∏ —Å—ä–µ—à—å –∫–æ–Ω—Ñ–µ—Ç–∫—É.'
    );
  }
}

async function onStart(ctx) {
  console.log('Start command initiated');
  const { chat, from } = ctx.update.message;

  if (!isValidOnStartContext(ctx)) {
    console.error(
      'Error getting chat id in onStart handler. ctx:',
      JSON.stringify(ctx)
    );
    ctx.reply(
      '–ü—Ä–∏–≤–µ—Ç! –£ —Ç–µ–±—è –∫–∞–∫–æ–π-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω—ã–π —á–∞—Ç. –Ø —Ç–∞–∫–æ–≥–æ –Ω–µ –æ–∂–∏–¥–∞–ª! –ù–æ –ø–æ—Å–º–æ—Ç—Ä—é —á—Ç–æ —Å —ç—Ç–∏–º –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
    );
    return;
  }

  const chatEntity = await Chat.findOne({ chatId: chat.id });
  if (!chatEntity) {
    console.log('User not found, creating new chat');

    try {
      await Chat.createNewChat(chat.id, from);
      ctx.reply(
        '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∫–ª–∏–Ω–∏–Ω–≥ –º–µ–Ω–µ–¥–∂–µ—Ä. –Ø –ø–æ–¥—Å–∫–∞–∂—É —Ç–µ–±–µ –∫–æ–≥–¥–∞ –∏ —á—Ç–æ —É–±—Ä–∞—Ç—å –≤ —Ç–≤–æ–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ. –ö–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üßπ'
      );
    } catch (err) {
      console.error('Error creating new chat', err);
      console.error('Error data', { chatId: chat.id, from });
    }
  } else if (!chatEntity.isActive) {
    await Chat.updateOne({ chatId: ctx.chat.id }, { isActive: true });
    ctx.reply(
      '–ö–∞–∫–∏–µ –ª—é–¥–∏ –≤ –≥–æ–ª–∏–≤—É–¥–µ! –£–∂–µ —É—Å–ø–µ–ª –∑–∞—Å—Ä–∞—Ç—å—Å—è –±–µ–∑ –º–µ–Ω—è! –ù—É –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –¥—Ä—É–∂–∏—â–µ ü•∏'
    );
  } else {
    ctx.reply(
      '–î—Ä—É–∂–æ–∫ –ø–∏—Ä–æ–∂–æ–∫, —Ö–≤–∞—Ç–∏—Ç –∂–º–∞–∫–∞—Ç—å –ø–æ —Å—Ç–∞—Ä—Ç—É, —è —Ç—É—Ç –∏ —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞—é. –ï—Å–ª–∏ —á—Ç–æ, –Ω–∞–ø–∏—à–∏ /currentTask –∏ —è —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω—é —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É.'
    );
  }
}
